GitHub
What is GitHub?
GitHub is a Distriubted Version Control (DVC): it stores the entire history of the files on each and every machine locally and also sync the local changes which made by user back to the server when required. All the changes can be shared with others which result in a collaborative working environment. There is another type of version control which is Centralised Version Control (CVC) which all files are kept in the server that users have access to from their local machines. One example of CVC is SVN.  DVC are more advance since it offers better performance, offline capability, backup, maintainability and also more flexibility. 
Benefits
Facilitate Collaboration: GitHub allows multiple developers to work on a project using the same repository. Using Github requires developers to actively communicate with others so they can minize the case such as merging conflict. Developers have to make comment whenever they commit changes or push something.  It teaches developers to use meanningful comments so they are understandable by other developers. GitHub also provide places for people to comment on the group works, it is a good place for discussion, sharing experience and encourage people. Specialised repositories can also be created in order to communicate with other departments.
Support Continuous Integration (CI) development: CI is a software engineering practice of frequently merging all developers work copies with a shared main branch. It is getting more common especially for Open Source Software (OSS) development. GitHub is currently the largest code host in the OSS world. Automated CI services such as TRAVIS-CI is integrated with GitHub itself automates the process of integrating many out-side contributions which can bring lots of potential benefits. Anyone with an account can submit their own changes with just a few clicks. However, not many projects utilize this service of GitHub as it is reported to be underused. (Vasilescu , Schuylenburg , Wulms, & Serebrenik , 2014)
Backup: GitHub repository is a backup it self. By having all the works in the GitHub respository, all the codes and other documents are safe and secure.  Moreover, every developer has a copy of the repository with a full history. Therefore, the chance of losing data due to sever failure is really low. Nonetheless developers have to remember to push their works regularly to minimise the risk of losing codes.
Project tracking: GitHub provides an easy way to keep track of different versions of your works by providing easy access to different repositories over time. In case of the current code does not work well and begin messy, developers can always move back to the last commit for a fresh start. 
Offline capability: developers work locally most of the time without network access. Tasks such as commits, create branches are not required internet connection. All the updates can be uploaded later until connection is up.
Maintainability: restructuring can be done on a copy repository before being trainsmitted to the original repository.
There are so many reasons and advantages of using GitHub to develop software. This regards to project communication and collaboration, project tracking and quality assuarance. Therefore, the capability of using GitHub should be compulsory for any developers thus this could be a challenge for the firm. However, GitHub has a friendly design and easy to begin with. With a proper learning session, the organization can quickly upskill its developers.

Slack: we will use Slack as our online communication tool, all of team members are in the team called "superA". We an have group or one to one chat in Slack. most of the communications between team members and client will be there.

Email and phone: These two are not our prior communication tools but they can be used in certain situation. For example, we will call any team members when have urgent problems need to ask, but most of the time we will use Slack to communicate.
